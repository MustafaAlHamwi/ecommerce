// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordReset {
  id        String   @id @default(cuid())
  code      String   @unique
  expires   DateTime
  userId    String
  User      User     @relation(fields: [userId], references: [id])
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
}

model EmailVerify {
  id        String   @id @default(cuid())
  code      String   @unique
  expires   DateTime
  userId    String
  User      User     @relation(fields: [userId], references: [id])
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
}

// Necessary for Next auth
model Account {
  id                String   @id @default(cuid())
  userId            String   @unique
  type              String
  provider          String
  password          String?
  providerAccountId String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  failedSignins     Int?     @default(0)
  //****Audit****//
  createdBy         String?
  updatedBy         String?
  deleted           Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  //****Relations****//
  user              User     @relation("UserAccount", fields: [userId], references: [id], onDelete: Cascade)
  UserCreated       User?    @relation("CreatedBy", fields: [createdBy], references: [id])
  UserUpdated       User?    @relation("UpdatedBy", fields: [updatedBy], references: [id])

  @@unique([provider, providerAccountId])
}

// Necessary for Next auth
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  //****Audit****//
  updatedBy    String?
  deleted      Boolean  @default(false)
  updatedAt    DateTime @updatedAt
  createdAt    DateTime @default(now())
  //****Relations****//
  user         User     @relation("UserSession", fields: [userId], references: [id], onDelete: Cascade)
  UserUpdated  User?    @relation("UpdatedBy", fields: [updatedBy], references: [id])
}

model PublicEmailProvider {
  id        String   @id @default(cuid())
  domain    String   @unique
  //****Audit****//
  createdBy String?
  updatedBy String?
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  //****Relations****//

  @@index([domain], type: Hash)
}

model Ecommerce {
  id             String    @id @default(cuid())
  name           String    @unique
  //****Audit****//
  createdBy      String?
  updatedBy      String?
  deleted        Boolean   @default(false)
  updatedAt      DateTime? @updatedAt
  createdAt      DateTime  @default(now())
  //****Relations****//
  Userecommerces User[]
  Products       Product[]
  Orders         Order[]
}

model User {
  id                String          @id @default(cuid())
  firstName         String?
  lastName          String?
  email             String?         @unique
  image             String?
  notificationToken String?
  ecommerceId       String?
  emailVerified     DateTime?
  permissionLevel   permissions     @default(USER)
  //****Audit****//
  deleted           Boolean         @default(false)
  updatedAt         DateTime?       @updatedAt
  createdAt         DateTime        @default(now())
  //****Relations****//
  Sessions          Session[]       @relation("UserSession")
  Accounts          Account[]       @relation("UserAccount")
  PasswordResets    PasswordReset[]
  Userecommerces    Ecommerce?      @relation(fields: [ecommerceId], references: [id])
  //****Audit Relations****//
  AccountsCreated   Account[]       @relation("CreatedBy")
  AccountsUpdated   Account[]       @relation("UpdatedBy")
  SessionsUpdated   Session[]       @relation("UpdatedBy")
  EmailVerify       EmailVerify[]
  ProductCreated    Product[]       @relation("CreatedBy")
  ProductUpdated    Product[]       @relation("UpdatedBy")
  Orders            Order[]
  ShoopingCarts     ShoppingCart[]
}

model Product {
  id           String     @id @default(cuid())
  name         String?
  description  String?
  price        Float?
  image        String?
  ecommerceId  String?
  countInStock Int?
  category     String?
  //****Audit****//
  createdBy    String?
  updatedBy    String?
  deleted      Boolean    @default(false)
  updatedAt    DateTime?  @updatedAt
  createdAt    DateTime   @default(now())
  //****Relations****//
  UserUpdated  User?      @relation("UpdatedBy", fields: [updatedBy], references: [id])
  UserCreated  User?      @relation("CreatedBy", fields: [createdBy], references: [id])
  Ecommerce    Ecommerce? @relation(fields: [ecommerceId], references: [id], onDelete: Cascade)
  CartItem     CartItem[]
}

model Order {
  id             String         @id @default(cuid())
  userEmail      String?
  ecommerceId    String         @unique
  paymentMethod  String?
  shippingPrice  Float?
  userId         String?
  userName       String?
  userNumber     String?
  userAddress    String?
  userCity       String?
  userPostalCode String?
  //****Audit****//
  createdBy      String
  updatedBy      String?
  deleted        Boolean        @default(false)
  updatedAt      DateTime?      @updatedAt
  createdAt      DateTime       @default(now())
  //****Relations****//
  user           User?          @relation(fields: [userId], references: [id])
  Ecommerce      Ecommerce      @relation(fields: [ecommerceId], references: [id])
  ShooppingCart  ShoppingCart[]
}

model ShoppingCart {
  id        String    @id @default(cuid())
  userId    String
  createdAt DateTime? @default(now())
  orderId   String?
  deleted   Boolean   @default(false)

  user  User       @relation(fields: [userId], references: [id])
  items CartItem[]
  Order Order?     @relation(fields: [orderId], references: [id])
}

model CartItem {
  id        String    @id @default(cuid())
  cartId    String
  productId String
  quantity  Int
  deleted   Boolean   @default(false)
  createdAt DateTime? @default(now())

  cart    ShoppingCart @relation(fields: [cartId], references: [id])
  product Product      @relation(fields: [productId], references: [id])
}

enum permissions {
  ADMIN
  USER
}
